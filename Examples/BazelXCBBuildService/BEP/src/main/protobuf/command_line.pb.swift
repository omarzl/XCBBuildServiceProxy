// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: src/main/protobuf/command_line.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

import src_main_protobuf_option_filters_proto

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct CommandLine_CommandLine {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var commandLineLabel: String = String()

  public var sections: [CommandLine_CommandLineSection] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct CommandLine_CommandLineSection {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var sectionLabel: String {
    get {return _storage._sectionLabel}
    set {_uniqueStorage()._sectionLabel = newValue}
  }

  public var sectionType: OneOf_SectionType? {
    get {return _storage._sectionType}
    set {_uniqueStorage()._sectionType = newValue}
  }

  public var chunkList: CommandLine_ChunkList {
    get {
      if case .chunkList(let v)? = _storage._sectionType {return v}
      return CommandLine_ChunkList()
    }
    set {_uniqueStorage()._sectionType = .chunkList(newValue)}
  }

  public var optionList: CommandLine_OptionList {
    get {
      if case .optionList(let v)? = _storage._sectionType {return v}
      return CommandLine_OptionList()
    }
    set {_uniqueStorage()._sectionType = .optionList(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_SectionType: Equatable {
    case chunkList(CommandLine_ChunkList)
    case optionList(CommandLine_OptionList)

  #if !swift(>=4.1)
    public static func ==(lhs: CommandLine_CommandLineSection.OneOf_SectionType, rhs: CommandLine_CommandLineSection.OneOf_SectionType) -> Bool {
      switch (lhs, rhs) {
      case (.chunkList(let l), .chunkList(let r)): return l == r
      case (.optionList(let l), .optionList(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct CommandLine_ChunkList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var chunk: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct CommandLine_OptionList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var option: [CommandLine_Option] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct CommandLine_Option {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var combinedForm: String = String()

  public var optionName: String = String()

  public var optionValue: String = String()

  public var effectTags: [src_main_protobuf_option_filters_proto.Options_OptionEffectTag] = []

  public var metadataTags: [src_main_protobuf_option_filters_proto.Options_OptionMetadataTag] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "command_line"

extension CommandLine_CommandLine: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CommandLine"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "command_line_label"),
    2: .same(proto: "sections"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.commandLineLabel)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.sections)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.commandLineLabel.isEmpty {
      try visitor.visitSingularStringField(value: self.commandLineLabel, fieldNumber: 1)
    }
    if !self.sections.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.sections, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: CommandLine_CommandLine, rhs: CommandLine_CommandLine) -> Bool {
    if lhs.commandLineLabel != rhs.commandLineLabel {return false}
    if lhs.sections != rhs.sections {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CommandLine_CommandLineSection: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CommandLineSection"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "section_label"),
    2: .standard(proto: "chunk_list"),
    3: .standard(proto: "option_list"),
  ]

  fileprivate class _StorageClass {
    var _sectionLabel: String = String()
    var _sectionType: CommandLine_CommandLineSection.OneOf_SectionType?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _sectionLabel = source._sectionLabel
      _sectionType = source._sectionType
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._sectionLabel)
        case 2:
          var v: CommandLine_ChunkList?
          if let current = _storage._sectionType {
            try decoder.handleConflictingOneOf()
            if case .chunkList(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._sectionType = .chunkList(v)}
        case 3:
          var v: CommandLine_OptionList?
          if let current = _storage._sectionType {
            try decoder.handleConflictingOneOf()
            if case .optionList(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._sectionType = .optionList(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._sectionLabel.isEmpty {
        try visitor.visitSingularStringField(value: _storage._sectionLabel, fieldNumber: 1)
      }
      switch _storage._sectionType {
      case .chunkList(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case .optionList(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: CommandLine_CommandLineSection, rhs: CommandLine_CommandLineSection) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._sectionLabel != rhs_storage._sectionLabel {return false}
        if _storage._sectionType != rhs_storage._sectionType {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CommandLine_ChunkList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ChunkList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "chunk"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedStringField(value: &self.chunk)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.chunk.isEmpty {
      try visitor.visitRepeatedStringField(value: self.chunk, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: CommandLine_ChunkList, rhs: CommandLine_ChunkList) -> Bool {
    if lhs.chunk != rhs.chunk {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CommandLine_OptionList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OptionList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "option"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.option)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.option.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.option, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: CommandLine_OptionList, rhs: CommandLine_OptionList) -> Bool {
    if lhs.option != rhs.option {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CommandLine_Option: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Option"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "combined_form"),
    2: .standard(proto: "option_name"),
    3: .standard(proto: "option_value"),
    4: .standard(proto: "effect_tags"),
    5: .standard(proto: "metadata_tags"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.combinedForm)
      case 2: try decoder.decodeSingularStringField(value: &self.optionName)
      case 3: try decoder.decodeSingularStringField(value: &self.optionValue)
      case 4: try decoder.decodeRepeatedEnumField(value: &self.effectTags)
      case 5: try decoder.decodeRepeatedEnumField(value: &self.metadataTags)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.combinedForm.isEmpty {
      try visitor.visitSingularStringField(value: self.combinedForm, fieldNumber: 1)
    }
    if !self.optionName.isEmpty {
      try visitor.visitSingularStringField(value: self.optionName, fieldNumber: 2)
    }
    if !self.optionValue.isEmpty {
      try visitor.visitSingularStringField(value: self.optionValue, fieldNumber: 3)
    }
    if !self.effectTags.isEmpty {
      try visitor.visitPackedEnumField(value: self.effectTags, fieldNumber: 4)
    }
    if !self.metadataTags.isEmpty {
      try visitor.visitPackedEnumField(value: self.metadataTags, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: CommandLine_Option, rhs: CommandLine_Option) -> Bool {
    if lhs.combinedForm != rhs.combinedForm {return false}
    if lhs.optionName != rhs.optionName {return false}
    if lhs.optionValue != rhs.optionValue {return false}
    if lhs.effectTags != rhs.effectTags {return false}
    if lhs.metadataTags != rhs.metadataTags {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
