// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: src/main/protobuf/option_filters.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Options_OptionEffectTag: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unknown // = 0
  case noOp // = 1
  case losesIncrementalState // = 2
  case changesInputs // = 3
  case affectsOutputs // = 4
  case buildFileSemantics // = 5
  case bazelInternalConfiguration // = 6
  case loadingAndAnalysis // = 7
  case execution // = 8
  case hostMachineResourceOptimizations // = 9
  case eagernessToExit // = 10
  case bazelMonitoring // = 11
  case terminalOutput // = 12
  case actionCommandLines // = 13
  case testRunner // = 14
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .noOp
    case 2: self = .losesIncrementalState
    case 3: self = .changesInputs
    case 4: self = .affectsOutputs
    case 5: self = .buildFileSemantics
    case 6: self = .bazelInternalConfiguration
    case 7: self = .loadingAndAnalysis
    case 8: self = .execution
    case 9: self = .hostMachineResourceOptimizations
    case 10: self = .eagernessToExit
    case 11: self = .bazelMonitoring
    case 12: self = .terminalOutput
    case 13: self = .actionCommandLines
    case 14: self = .testRunner
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .noOp: return 1
    case .losesIncrementalState: return 2
    case .changesInputs: return 3
    case .affectsOutputs: return 4
    case .buildFileSemantics: return 5
    case .bazelInternalConfiguration: return 6
    case .loadingAndAnalysis: return 7
    case .execution: return 8
    case .hostMachineResourceOptimizations: return 9
    case .eagernessToExit: return 10
    case .bazelMonitoring: return 11
    case .terminalOutput: return 12
    case .actionCommandLines: return 13
    case .testRunner: return 14
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Options_OptionEffectTag: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Options_OptionEffectTag] = [
    .unknown,
    .noOp,
    .losesIncrementalState,
    .changesInputs,
    .affectsOutputs,
    .buildFileSemantics,
    .bazelInternalConfiguration,
    .loadingAndAnalysis,
    .execution,
    .hostMachineResourceOptimizations,
    .eagernessToExit,
    .bazelMonitoring,
    .terminalOutput,
    .actionCommandLines,
    .testRunner,
  ]
}

#endif  // swift(>=4.2)

public enum Options_OptionMetadataTag: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case experimental // = 0
  case incompatibleChange // = 1
  case deprecated // = 2
  case hidden // = 3
  case `internal` // = 4
  case triggeredByAllIncompatibleChanges // = 5
  case UNRECOGNIZED(Int)

  public init() {
    self = .experimental
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .experimental
    case 1: self = .incompatibleChange
    case 2: self = .deprecated
    case 3: self = .hidden
    case 4: self = .internal
    case 5: self = .triggeredByAllIncompatibleChanges
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .experimental: return 0
    case .incompatibleChange: return 1
    case .deprecated: return 2
    case .hidden: return 3
    case .internal: return 4
    case .triggeredByAllIncompatibleChanges: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Options_OptionMetadataTag: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Options_OptionMetadataTag] = [
    .experimental,
    .incompatibleChange,
    .deprecated,
    .hidden,
    .internal,
    .triggeredByAllIncompatibleChanges,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Options_OptionEffectTag: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "NO_OP"),
    2: .same(proto: "LOSES_INCREMENTAL_STATE"),
    3: .same(proto: "CHANGES_INPUTS"),
    4: .same(proto: "AFFECTS_OUTPUTS"),
    5: .same(proto: "BUILD_FILE_SEMANTICS"),
    6: .same(proto: "BAZEL_INTERNAL_CONFIGURATION"),
    7: .same(proto: "LOADING_AND_ANALYSIS"),
    8: .same(proto: "EXECUTION"),
    9: .same(proto: "HOST_MACHINE_RESOURCE_OPTIMIZATIONS"),
    10: .same(proto: "EAGERNESS_TO_EXIT"),
    11: .same(proto: "BAZEL_MONITORING"),
    12: .same(proto: "TERMINAL_OUTPUT"),
    13: .same(proto: "ACTION_COMMAND_LINES"),
    14: .same(proto: "TEST_RUNNER"),
  ]
}

extension Options_OptionMetadataTag: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "EXPERIMENTAL"),
    1: .same(proto: "INCOMPATIBLE_CHANGE"),
    2: .same(proto: "DEPRECATED"),
    3: .same(proto: "HIDDEN"),
    4: .same(proto: "INTERNAL"),
    5: .same(proto: "TRIGGERED_BY_ALL_INCOMPATIBLE_CHANGES"),
  ]
}
